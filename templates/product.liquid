{{ 'product--page.css' | asset_url | stylesheet_tag }}

<style>
  .single-product form .images .swiper {
    max-width: 60vw;
  }

  .single-product form .images .swiper .swiper-pagination {
      text-align: right;
      padding: 0 10px 5px 0;
      display: flex;
      flex-direction: row;
      justify-content: flex-end;
      align-items: center;
      gap: 2px;
  }

  @media screen and (max-width: 900px) {
    .single-product form .images .swiper {
      max-width: 64vw;
    }

    .single-product form .images .swiper .swiper-pagination {
      justify-content: center;
    }

    .swiper-pagination-bullet {
        width: 8px;
        height: 8px;
    }
    
  }
</style>

{% assign add_to_cart = 'Add to cart' %}
{% assign sold_out = 'Sold Out' %}
{% assign unavailable = 'Unavailable' %}

{% assign product_vendor_handle = product.vendor | handle %}
{% if collections[product_vendor_handle].handle == product_vendor_handle %}
  {% assign vendor_url = collections[product_vendor_handle].url %}
{% else %}
  {% assign vendor_url = product.vendor | url_for_vendor %}
{% endif %}

{% assign hide_default_title = false %}
{% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
  {% assign hide_default_title = true %}
{% endif %}   

<meta itemprop="url" content="{{ shop.url }}{{ product.url }}" />
<meta itemprop="image" content="{{ product | image_url: width: 1200 }}" />

<div class="single-product" itemscope itemtype="http://schema.org/Product">
  
  <form action="/cart/add" method="post" enctype="multipart/form-data">

    <div class="images">

      <div class="swiper">
        <div class="swiper-wrapper">

          {% for image in product.images %}
            <div class="swiper-slide" style="background: url('{{ image | image_url: width: 2200 }}'); background-size: cover; background-position: center center;">
            </div>
          {% endfor %}
              
        </div>

        <div class="swiper-pagination"></div>

      </div>

    </div>
    
    <div class="data">

      
      <div class="highlight">
        {{ product.metafields.custom.highlight }}
      </div>

      <div class="title">
        <h1>{{ product.title }}</h1>
      </div>
      
      <div class="subtitle">
        {{ product.metafields.custom.subtitle }}
      </div>

      <div class="price">
        {% if product.price_varies %}
          {{ product.price_min | money_without_trailing_zeros }}
        {% else %}
          {{ product.price | money_without_trailing_zeros }}
        {% endif %}
      </div>

      {% if product.metafields.custom.excerpt != blank %}
        <div class="excerpt">
          {{ product.metafields.custom.excerpt | metafield_tag | newline_to_br }}
        </div>
      {% endif %}
      
      {% if product.description != blank %}
        <div class="description">
          {{ product.description }}
        </div>
      {% endif %}

      {% render 'product--variant-radios' %}
 
      <div class="add-to-cart" id="product-add">
        <input class="button" type="submit" name="add" id="add" value="{{ add_to_cart | escape }}">
      </div>

      <div class="form-errors" data-ajax-cart-messages="form" > 
        <!-- Errors and messages appear here --> 
      </div>

    </div>

  </form>

</div>

{% comment %}
  Adding support for product options. See here for details:  
  http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options
{% endcomment %}
<script>
  
var selectCallback = function(variant, selector) {

  if (variant) {
    
    // Swap image.
    if (variant.featured_image) {
      var newImage = variant.featured_image; // New image object.
      var mainImageDomEl = jQuery('.product-photo-container img')[0]; // DOM element of main image we need to swap.
      Shopify.Image.switchImage(newImage, mainImageDomEl, switchImage); // Define switchImage (the callback) in your theme's JavaScript file.
    }
    
    // Selected a valid variant that is available.
    if (variant.available) {
          
      // Enabling add to cart button.
      jQuery('#add').removeClass('disabled').prop('disabled', false).val({{ add_to_cart | json }});
    
      // If item is backordered yet can still be ordered, we'll show special message.
      if (variant.inventory_management && variant.inventory_quantity <= 0) {
        jQuery('#selected-variant').html({{ product.title | json }}{% unless hide_default_title %} + ' - ' + variant.title{% endunless %});
        jQuery('#backorder').removeClass("hidden");
      } else {
        jQuery('#backorder').addClass("hidden");
      }
      
    } else {
      // Variant is sold out.
      jQuery('#backorder').addClass('hidden');
      jQuery('#add').val({{ sold_out | json }}).addClass('disabled').prop('disabled', true);       
    }
    
    // Whether the variant is in stock or not, we can update the price and compare at price.
    if ( variant.compare_at_price > variant.price ) {
      jQuery('#product-price').html('<span class="product-price on-sale">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") +'</span>'+'&nbsp;<s class="product-compare-price">'+Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}")+ '</s>');
    } else {
      jQuery('#product-price').html('<span class="product-price">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") + '</span>' );
    }        

  } else {
    // variant doesn't exist.
    jQuery('#product-price').empty();
    jQuery('#backorder').addClass('hidden');
    jQuery('#add').val({{ unavailable | json }}).addClass('disabled').prop('disabled', true);
  }

};
  
jQuery(function($) {

  new Shopify.OptionSelectors('product-select', { product: {{ product | json }}, onVariantSelected: selectCallback, enableHistoryState: true });
  
  // Add label if only one product option and it isn't 'Title'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
  {% endif %}

});

Shopify.Image.preload({{ product.images | json }}, 'grande');
Shopify.Image.preload({{ product.images | json }}, '1024x1024');

</script>